{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","error","isLoaded","imageURL","this","className","message","src","alt","onClick","getNewMeme","bind","setState","fetch","then","res","json","result","url","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA4DeA,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,SAAU,MALK,E,0CAQjB,WACE,MAAsCC,KAAKJ,MAAnCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,SAEzB,OACE,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,6CACCJ,GAAS,0CAAaA,EAAMK,YAC3BJ,GAAY,6CACbC,GAAY,qBAAKI,IAAKJ,EAAUK,IAAI,SACrC,wBAAQC,QAASL,KAAKM,WAAWC,KAAKP,MAAtC,6B,+BAKR,WACEA,KAAKM,e,wBAKP,WAAa,IAAD,OACNN,KAAKJ,MAAME,UACbE,KAAKQ,SAAS,CACZV,UAAU,IAGdW,MAAM,uDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKL,SAAS,CACZV,UAAU,EACVC,SAAUc,EAAOC,SAMrB,SAACjB,GACC,EAAKW,SAAS,CACZV,UAAU,EACVD,iB,GAnDMkB,IAAMC,WCUTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3f2f8a91.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      imageURL: null\n    };\n  }\n    render(){\n      const { error, isLoaded, imageURL } = this.state;\n      \n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>React Memes</h2>\n            {error && <div>Error: {error.message}</div>}\n            {!isLoaded && <div>Loading...</div>}\n            {imageURL && <img src={imageURL} alt='meme'/>}\n            <button onClick={this.getNewMeme.bind(this)}>New Meme</button>\n          </header>\n        </div>\n      );\n    }\n    componentDidMount(){\n      this.getNewMeme();\n    }\n    // shouldComponentUpdate(prevProps){\n    //   return prevProps.isLoaded !== this.props.isLoaded\n    // }\n    getNewMeme(){\n      if (this.state.isLoaded){\n        this.setState({\n          isLoaded: false,\n        });\n      }\n      fetch(`https://meme-api.herokuapp.com/gimme/wholesomememes`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            imageURL: result.url\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}